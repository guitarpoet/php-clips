   /*******************************************************/
   /*      "C" Language Integrated Production System      */
   /*                                                     */
   /*            CLIPS Version 6.40  01/06/16             */
   /*                                                     */
   /*                                                     */
   /*******************************************************/

/*************************************************************/
/* Purpose:                                                  */
/*                                                           */
/* Principal Programmer(s):                                  */
/*      Brian L. Dantes                                      */
/*                                                           */
/* Contributing Programmer(s):                               */
/*                                                           */
/* Revision History:                                         */
/*      6.23: Corrected compilation errors for files         */
/*            generated by constructs-to-c. DR0861           */
/*                                                           */
/*      6.24: Renamed BOOLEAN macro type to intBool.         */
/*                                                           */
/*      6.30: Removed conditional code for unsupported       */
/*            compilers/operating systems (IBM_MCW,          */
/*            MAC_MCW, and IBM_TBC).                         */
/*                                                           */
/*            Changed integer type/precision.                */
/*                                                           */
/*            Added const qualifiers to remove C++           */
/*            deprecation warnings.                          */
/*                                                           */
/*            Converted API macros to function calls.        */
/*                                                           */
/*            Fixed linkage issue when DEBUGGING_FUNCTIONS   */
/*            is set to 0 and PROFILING_FUNCTIONS is set to  */
/*            1.                                             */
/*                                                           */
/*            Changed find construct functionality so that   */
/*            imported modules are search when locating a    */
/*            named construct.                               */
/*                                                           */
/*************************************************************/

#ifndef _H_genrccom

#pragma once

#define _H_genrccom

#include "constrct.h"
#include "cstrccom.h"
#include "evaluatn.h"
#include "genrcfun.h"
#include "moduldef.h"
#include "symbol.h"

   void                           SetupGenericFunctions(void *);
   void                          *EnvFindDefgeneric(void *,const char *);
   void                          *EnvFindDefgenericInModule(void *,const char *);
   DEFGENERIC                    *LookupDefgenericByMdlOrScope(void *,const char *);
   DEFGENERIC                    *LookupDefgenericInScope(void *,const char *);
   void                          *EnvGetNextDefgeneric(void *,void *);
   long                           EnvGetNextDefmethod(void *,void *,long);
   bool                           EnvIsDefgenericDeletable(void *,void *);
   bool                           EnvIsDefmethodDeletable(void *,void *,long);
   void                           UndefgenericCommand(UDFContext *,CLIPSValue *);
   void                           GetDefgenericModuleCommand(UDFContext *,CLIPSValue *);
   void                           UndefmethodCommand(UDFContext *,CLIPSValue *);
   DEFMETHOD                     *GetDefmethodPointer(void *,long);
   bool                           EnvUndefgeneric(void *,void *);
   bool                           EnvUndefmethod(void *,void *,long);
#if ! OBJECT_SYSTEM
   void                           TypeCommand(UDFContext *,CLIPSValue *);
#endif
#if DEBUGGING_FUNCTIONS || PROFILING_FUNCTIONS
   void                           EnvGetDefmethodDescription(void *,char *,size_t,void *,long);
#endif
#if DEBUGGING_FUNCTIONS
   bool                           EnvGetDefgenericWatch(void *,void *);
   void                           EnvSetDefgenericWatch(void *,bool,void *);
   bool                           EnvGetDefmethodWatch(void *,void *,long);
   void                           EnvSetDefmethodWatch(void *,bool,void *,long);
   void                           PPDefgenericCommand(UDFContext *,CLIPSValue *);
   void                           PPDefmethodCommand(UDFContext *,CLIPSValue *);
   void                           ListDefmethodsCommand(UDFContext *,CLIPSValue *);
   const char                    *EnvGetDefmethodPPForm(void *,void *,long);
   void                           ListDefgenericsCommand(UDFContext *,CLIPSValue *);
   void                           EnvListDefgenerics(void *,const char *,struct defmodule *);
   void                           EnvListDefmethods(void *,const char *,void *);
#endif
   void                           GetDefgenericListFunction(UDFContext *,CLIPSValue *);
   void                           EnvGetDefgenericList(void *,DATA_OBJECT *,struct defmodule *);
   void                           GetDefmethodListCommand(UDFContext *,CLIPSValue *);
   void                           EnvGetDefmethodList(void *,void *,DATA_OBJECT *);
   void                           GetMethodRestrictionsCommand(UDFContext *,CLIPSValue *);
   void                           EnvGetMethodRestrictions(void *,void *,long,DATA_OBJECT *);
   SYMBOL_HN                     *GetDefgenericNamePointer(void *);
   void                           SetNextDefgeneric(void *,void *);
   const char                    *EnvDefgenericModule(void *,void *);
   const char                    *EnvGetDefgenericName(void *,void *);
   const char                    *EnvGetDefgenericPPForm(void *,void *);
   SYMBOL_HN                     *EnvGetDefgenericNamePointer(void *,void *);
   void                           EnvSetDefgenericPPForm(void *,void *,const char *);

#endif /* _H_genrccom */





